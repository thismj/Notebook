{"./":{"url":"./","title":"知识笔记","keywords":"","body":"学习笔记整理 旨在建立自己的知识体系，成为一个胸有成竹的人 [ ] 一天一个知识点 [x] 怕是吹牛逼 print [x + 1 for x in range(10)] Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-14 20:02:23 "},"Java基础/":{"url":"Java基础/","title":"Java基础","keywords":"","body":"Java基础 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:56:45 "},"Java基础/part1.html":{"url":"Java基础/part1.html","title":"基本类型","keywords":"","body":"基本类型 java 中共有几种基本数据类型？每种类型各占多少个字节数？ 类的成员变量、基本类型数组 → 方法区（Method Area） 局部变量、方法参数 → 虚拟机栈中栈帧的局部变量表（Local Variables） 虚拟机栈中栈帧的操作数栈（Operand Stack） int 与 integer 的区别？自动装箱与自动拆箱？ Integer 内部类 IntegerCache 保存了 [-128, 虚拟机参数指定最大值] 的对象缓存 写个例子用 javap 查看字节码，发现自动装箱与自动拆箱实际上等同于 Integer 的 valueOf() 以及 intValue() 方法 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-14 21:13:23 "},"Java基础/part2.html":{"url":"Java基础/part2.html","title":"==、equals和hashCode","keywords":"","body":"==、equals() 和 hashCode() Java 中 ==、equals() 和 hashCode() 的作用以及区别？ 利用 Objects 类来比较 equals() 以及重写 hashCode() 方法，规避空指针 重写 equals() 方法的原则? 自反性（Reflexive） 对称性（Symmetric） 传递性（Transitive） 一致性（Consistent） 对任何非空对象 x， x.equals(null) 必定为 false 重写 hashCode() 方法的原则？ 在程序执行期间，只要 equals() 方法的比较操作用到的信息没有被修改，那么对这同一个对象调用多次，hashCode() 方法必须始终如一地返回同一个整数 如果两个对象通过 equals() 方法比较得到的结果是相等的，那么对这两个对象进行 hashCode() 得到的值应该相同 两个不同的对象，hashCode() 的结果可能是相同的，这就是哈希表中的冲突。为了保证哈希表的效率，哈希算法应尽可能的避免冲突 为什么重写 equals() 方法后一定也要重写 hashCode() 方法？ Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-14 20:33:53 "},"Java基础/part3.html":{"url":"Java基础/part3.html","title":"String、StringBuffer和StringBuilder","keywords":"","body":"String、StringBuffer和StringBuilder String.intern() 方法的作用？ String、StringBuffer 和 StringBuilder 区别？ Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-14 21:39:53 "},"Java进阶/":{"url":"Java进阶/","title":"Java进阶","keywords":"","body":"Java进阶 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:56:45 "},"Java进阶/part2.html":{"url":"Java进阶/part2.html","title":"Java静态代理与动态代理","keywords":"","body":"Java静态代理与动态代理 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:56:45 "},"Android/":{"url":"Android/","title":"JVM","keywords":"","body":"JVM Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:56:45 "},"jvm/part1.html":{"url":"jvm/part1.html","title":"JVM内存区域划分","keywords":"","body":"JVM内存区域划分 Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，内存模型如下图所示： Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 20:53:45 "},"计算机网络/":{"url":"计算机网络/","title":"计算机网络","keywords":"","body":"计算机网络 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:56:45 "},"计算机组成原理/":{"url":"计算机组成原理/","title":"计算机组成原理","keywords":"","body":"计算机组成原理 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-15 14:30:12 "},"数据结构/":{"url":"数据结构/","title":"数据结构","keywords":"","body":"数据结构 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:56:45 "},"算法/":{"url":"算法/","title":"算法","keywords":"","body":"算法 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:56:45 "},"版本管理/":{"url":"版本管理/","title":"版本管理","keywords":"","body":"版本管理 Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-15 14:30:12 "},"版本管理/part1.html":{"url":"版本管理/part1.html","title":"Git常用命令","keywords":"","body":"Git常用命令 git config //查看当前目录Git配置信息 git config --list //查看全局Git配置信息 git config --global --list //查看当前目录Git配置的用户邮箱 git config user.email //配置当前目录Git的用户名字 git config user.name \"ThisMJ\" git subtree Copyright © thismj.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-15 14:46:03 "}}